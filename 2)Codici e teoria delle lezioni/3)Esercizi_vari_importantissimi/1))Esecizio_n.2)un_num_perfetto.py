
"""
Un numero perfetto √® un numero naturale uguale alla somma dei suoi divisori
positivi, escluso s√© stesso. Scrivere una funzione che verifichi se un numero √®
perfetto oppure no.

"""

# Definiamo una funzione che verifica se un numero √® perfetto
def Verifica_Num_Perfetto(n):
    '''
    La funzione accetta un numero intero n e verifica se √® perfetto.
    Un numero perfetto √® uguale alla somma dei suoi divisori (escluso s√© stesso).
    Restituisce True se il numero √® perfetto, False altrimenti.
    '''
    # Inizializziamo la variabile che terr√† la somma dei divisori
    somma_divisori = 0
    
    # Inizializziamo il contatore che useremo per trovare i divisori
    i = 1 

    # Corretto il ciclo WHILE per scorrere da 1 fino a n//2
    while i <= n // 2:  # ‚úÖ Corretta la condizione: prima era errata
        # Se i √® un divisore di n, lo aggiungiamo alla somma
        if n % i == 0:  # n % i restituisce il resto della divisione. Se √® 0, significa che i √® divisore di n
            somma_divisori += i  # Aggiungiamo i alla somma dei divisori

        # Incrementiamo i per controllare il numero successivo
        i += 1  

    # Se la somma dei divisori √® uguale a n, allora n √® un numero perfetto
    if somma_divisori == n:
        return True  
    else:
        return False  

# Chiediamo all'utente di inserire un numero intero positivo
n = int(input("inserisci numero intero positiv: "))  

# Verifichiamo se il numero inserito √® perfetto chiamando la funzione Verifica_Num_Perfetto()
if Verifica_Num_Perfetto(n):  # Se la funzione restituisce True...
    print("Il numero " + str(n) + " √® un numero perfetto.")  
else:
    print("Il numero " + str(n) + " non √® un numero perfetto.")  

''' Perch√© questa correzione?

in non √® l'operatore corretto ‚Üí doveva essere <= per confrontare i con n//2.
n/2 restituisce un float ‚Üí n // 2 assicura che il valore sia un intero (divisione intera).
I divisori di n sono sempre ‚â§ n//2, quindi non serve iterare fino a n-1.
'''

###################################################################################################################
'''
Perch√© usiamo str(n)?
In Python, non puoi concatenare direttamente una stringa e un numero intero (int), perch√© genererebbe un errore:

Esempio errato:
n = 6
print("Il numero " + n + " √® perfetto.")  # ‚ùå ERRORE: TypeError: can only concatenate str (not "int") to str

Per risolvere questo problema, bisogna convertire n in una stringa con str(n), in modo che Python possa unirlo al resto del testo:

Esempio corretto:
print("Il numero " + str(n) + " √® perfetto.")  # ‚úÖ Funziona perfettamente
'''

'''
üîπ Analisi della concatenazione nella stampa del risultato:

print("Il numero " + str(n) + " √® un numero perfetto.")

üî∏ Parte 1: "Il numero " ‚Üí √à una stringa normale.
üî∏ Parte 2: str(n) ‚Üí Converte il numero n in una stringa, es. str(6) ‚Üí "6".
üî∏ Parte 3: " √® un numero perfetto." ‚Üí √à un'altra stringa normale.

Concatenazione finale:
"Il numero " + "6" + " √® un numero perfetto."

Risultato finale (se n = 6):
Il numero 6 √® un numero perfetto.
'''

# Verifica se il numero √® perfetto e stampa il risultato
if Verifica_Num_Perfetto(n):  # Se la funzione restituisce True...
    print("Il numero " + str(n) + " √® un numero perfetto.")  
else:
    print("Il numero " + str(n) + " non √® un numero perfetto.")  

'''
üîπ Alternative pi√π pulite:
Se vuoi un metodo pi√π leggibile e moderno, puoi usare f-string, che evita l'uso di +:

print(f"Il numero {n} √® un numero perfetto.")  # ‚úÖ Pi√π pulito e leggibile

üí° Output se n = 6:
Il numero 6 √® un numero perfetto.

Le f-string (f"...") permettono di inserire variabili direttamente dentro la stringa, senza bisogno di str() o +.
Funzionano con qualsiasi tipo di dato.
'''

'''
üîπ Conclusione:
‚úÖ Concatenazione (+) ‚Üí Unisce stringhe, ma serve str(n) per i numeri.
‚úÖ Problema senza str(n) ‚Üí Non puoi unire stringhe e numeri direttamente.
‚úÖ Migliore alternativa ‚Üí Usa f-string per scrivere codice pi√π leggibile.
'''





'''spiegami questo esercizio come svolgerlo imn modo che pero'  non me lo svolgi , che pero', riesca a farlo,( dammi anche vai sugerrimenti per riuscire nell'intento ) '''










'''INIZIO

DEFINISCI funzione √®NumeroPerfetto(n)
    INIZIALIZZA sommaDivisori = 0

    PER ogni numero i da 1 a n//2 FARE
        SE i √® divisore di n ALLORA
            Aggiungi i a sommaDivisori
        FINE SE
    FINE PER

    SE sommaDivisori √® uguale a n ALLORA
        RESTITUISCI VERO
    ALTRIMENTI
        RESTITUISCI FALSO
    FINE SE

FINE FUNZIONE
üîπ Come migliorare nella scrittura dello pseudocodice?
Inizia sempre con carta e penna

Prima di scrivere codice, prova a strutturarlo in pseudocodice.
Pensa ai passi necessari senza distrarti con la sintassi.
Pratica con esercizi semplici

Scrivi pseudocodice per problemi facili, come trovare un massimo in un array o sommare numeri.
Leggi pseudocodici di altri

Studia esempi online per capire diversi stili.
Trasforma lo pseudocodice in codice vero

Una volta scritto, prova a convertirlo in un linguaggio di programmazione.

'''





