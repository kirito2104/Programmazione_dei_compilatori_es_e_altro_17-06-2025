# Ottimo che me lo chiedi Piero! Ti spiego in modo semplice **cos'√® la complessit√† spaziale**, 
# **a cosa serve** e **come si calcola** ‚Äî cos√¨ non te lo scordi pi√π üòâ

# ----------------------------------------------------------
# üß† COSA SIGNIFICA "COMPLESSIT√Ä SPAZIALE"?
# La **complessit√† spaziale** misura **quanta memoria (RAM)** serve a un algoritmo per 
# funzionare in base alla dimensione dell‚Äôinput.
# In parole semplici: **quanta roba serve salvare in memoria mentre il programma gira**.
# ----------------------------------------------------------

# ----------------------------------------------------------
# üéØ A COSA SERVE?
# Serve a:
# - Ottimizzare programmi che girano su dispositivi con **poca RAM**.
# - Evitare algoritmi che consumano troppa memoria su input grandi.
# - Capire **quanto "pesante" √® un algoritmo**, non solo in termini di tempo ma anche di spazio.
# ----------------------------------------------------------

# ----------------------------------------------------------
# üîç COME SI CALCOLA?
# Si conta **la quantit√† di variabili o strutture dati create durante l‚Äôesecuzione** 
# in funzione dell'input.
#
# ‚ú® Due casi:
# 1. **Spazio extra fisso ‚Üí `O(1)` (costante)**  
#    - Usi solo variabili semplici (`i`, `j`, contatori, flag...).
#    - NON dipende dalla lunghezza dell‚Äôinput.
#
# 2. **Spazio extra proporzionale all‚Äôinput ‚Üí `O(n)` o altro**  
#    - Usi **liste, set, dict** che crescono con l‚Äôinput.
#    - Esempio: costruisci una lista di output lunga quanto `n` ‚Üí `O(n)`
# ----------------------------------------------------------

# ----------------------------------------------------------
# ‚úÖ NEL TUO CASO:
def intersezione(L1, L2):
    i, j = 0, 0           # ‚Üí variabili scalari ‚Üí spazio costante
    risultato = []        # ‚Üí output, quindi non conta nello spazio supplementare

# - `i` e `j` sono variabili ‚Üí **spazio costante**
# - `risultato` cresce, ma √® **l‚Äôoutput**, quindi **non conta** se ti riferisci allo spazio **supplementare**
# - Non usi strutture extra ‚Üí **complessit√† spaziale = `O(1)`**
#
# üìå Se per√≤ **consideri anche l‚Äôoutput**, allora diventa `O(k)` dove `k` √® il numero di elementi comuni tra `L1` e `L2`.
# ----------------------------------------------------------

# ----------------------------------------------------------
# üßÆ Riepilogo:

# | Tipo di spazio            | Cosa significa            | Esempio                     | Complessit√† |
# |---------------------------|---------------------------|-----------------------------|-------------|
# | Fisso (costante)          | Solo variabili scalari    | `i = 0`, `j = 0`            | `O(1)`      |
# | Proporzionale all'input   | Lista, dizionario, ecc.   | `output = list(n)`          | `O(n)`      |
# | Dipende da output         | Output cresce con i dati  | `output = [x for x in L1]`  | `O(k)`      |
# -----------------------------------------------------------------------------------------------------

#####################################################################################################################################################
############################################################################################################################################################


# Certo Piero! Ecco altri **casi tipici di complessit√† spaziale**, spiegati in modo **conciso, preciso** e con esempi pratici:

# ------------------------------------------------------------------
# üü¢ `O(1)` ‚Äì **Spazio Costante**
# üîπ Definizione: la memoria usata **non cresce** con l‚Äôinput.
# üì¶ Esempio: solo variabili scalari (int, bool...).

def somma(L):
    tot = 0
    for x in L:
        tot += x
    return tot

# ‚úÖ Solo `tot` ‚Üí **O(1)**

# ------------------------------------------------------------------
# üîµ `O(n)` ‚Äì **Lineare**
# üîπ Definizione: spazio usato cresce **proporzionalmente** alla dimensione dell‚Äôinput.
# üì¶ Esempio: copi input, costruisci lista o dict grandi quanto `n`.

def copia_lista(L):
    return L[:]  # nuova lista grande quanto L

# ‚úÖ Output di dimensione `n` ‚Üí **O(n)**

# ------------------------------------------------------------------
# üü† `O(log n)` ‚Äì **Logaritmica**
# üîπ Definizione: usi memoria extra che cresce **logaritmicamente** rispetto all‚Äôinput.
# üì¶ Esempio: ricerca binaria ricorsiva.

def ricerca_binaria(L, x, inizio, fine):
    # Caso base: se l'intervallo √® vuoto, l'elemento non √® presente
    if inizio > fine:
        return False

    # Calcola l'indice centrale dell'intervallo corrente
    mid = (inizio + fine) // 2

    # Se l'elemento centrale √® quello cercato, restituisci True
    if L[mid] == x:
        return True

    # Se l'elemento cercato √® pi√π piccolo, cerca nella met√† sinistra
    elif x < L[mid]:
        return ricerca_binaria(L, x, inizio, mid - 1)

    # Altrimenti cerca nella met√† destra
    else:
        return ricerca_binaria(L, x, mid + 1, fine)


# ‚úÖ Stack di chiamate profondo `log n` ‚Üí **O(log n)**

# ------------------------------------------------------------------
# üî¥ `O(n¬≤)` ‚Äì **Quadratica**
# üîπ Definizione: memoria cresce **al quadrato** dell‚Äôinput (tipico in tabelle 2D).
# üì¶ Esempio: matrice `n x n`.

def matrice_z(n):
    return [[0]*n for _ in range(n)]

# ‚úÖ Crea matrice `n√ón` ‚Üí **O(n¬≤)**

# ------------------------------------------------------------------
# üü£ `O(2^n)` ‚Äì **Esponenziale**
# üîπ Definizione: spazio cresce **esponenzialmente** con l‚Äôinput.
# üì¶ Esempio: algoritmi bruteforce o ricorsione senza memoization.

def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

# ‚úÖ Stack cresce come `2^n` ‚Üí **O(2^n)** (spazio e tempo)

# ------------------------------------------------------------------
# üìå Nota: se usi **memoization**, puoi passare da `O(2^n)` a **O(n)**, 
#         ma usi pi√π spazio (per la cache).

# **tabella riassuntiva** dei casi pi√π comuni di **complessit√† spaziale**, 
# con definizione, esempio e nota chiave:

# ------------------------------------------------------------------
# üß† Tabella: Complessit√† Spaziale a Confronto
#
# | Complessit√† | Cosa significa                      | Esempio codice                           | Spazio usato                  |
# |-------------|-------------------------------------|---------------------------------------- -|-------------------------------|
# | `O(1)`      | Spazio costante                     | `tot = 0`                                | Solo variabili scalari        |
# | `O(n)`      | Spazio proporzionale all'input      | `copia = L[:]`                           | Lista lunga quanto l‚Äôinput    |
# | `O(log n)`  | Cresce lentamente (ricorsione log)  | Ricerca binaria                          | Stack chiamate profondo log n |
# | `O(n¬≤)`     | Spazio quadratico                   | `[[0]*n for _ in range(n)]`              | Matrice `n√ón`                 |
# | `O(2^n)`    | Spazio esponenziale                 | `fibonacci(n)` senza memoization         | Ricorsione esplosiva          |

# ------------------------------------------------------------------
# üìå Memoization:
# - Trasforma `O(2^n)` in `O(n)` in termini di tempo,
#   ma **richiede pi√π memoria** per la **cache** ‚Üí spesso `O(n)` spazio.

# ------------------------------------------------------------------
